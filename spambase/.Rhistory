# https://www.r-bloggers.com/normality-tests-for-continuous-data/
install.packages("nortest")
library(nortest)
# http://www.dummies.com/programming/r/how-to-test-data-normality-in-a-formal-way-in-r/
install.packages("car")
library(car)
install.packages("car")
installed.packages("MVN")
installed.packages('MVN')
installed.packages('car')
install.packages('car')
install.packages('MVN')
updateR()
update.packages()
install.packages("installr")
require(installr)
updateR()
data <- read.csv("spambase.data", header = F)
setwd("~/Unive/Magistrale/AI/SpamFilter/spambase")
data <- read.csv("spambase.data", header = F)
nm <- scan(file = "names.txt", what="character")
names(data) <- nm
str(data)
features <- c(1:54)
View(cor(data$class, data[,features]))
spam <- data[data$V58 == 1, 1:m]
ham <- data[data$V58 == 0, 1:m]
m <- 54
spam <- data[data$V58 == 1, 1:m]
ham <- data[data$V58 == 0, 1:m]
spam
spam <- data[data$class == 1, 1:m]
ham <- data[data$class == 0, 1:m]
spam
plot(spam$word_freq_make, spam$word_freq_address)
plot(spam$word_freq_make, spam$word_freq_internet)
cor(spam)
lm_spam <- lm(formula = word_freq_make + word_freq_internet + word_freq_all + word_freq_address, data = spam)
str(spam)
lm_spam <- lm(formula = word_freq_make + word_freq_internet + word_freq_all + word_freq_address, data = spam)
lm_spam <- with(spam,lm(formula = word_freq_make + word_freq_internet + word_freq_all + word_freq_address, data = spam))
lm_spam <- lm(word_freq_make + word_freq_internet + word_freq_all + word_freq_address, data = spam)
lm_spam <- lm(class ~ word_freq_make + word_freq_internet + word_freq_all + word_freq_address, data = spam)
lm_spam <- lm(class ~ word_freq_make, data = spam)
lm_spam <- lm(class ~ word_freq_make, data = matrix(spam))
lm_spam <- lm(class ~ word_freq_make, data = as.matrix(spam))
lm_spam <- lm(class ~ word_freq_make, data = spam)
lm_spam <- lm(class ~ spam$word_freq_make, data = spam)
spam$word_freq_make
lm_spam <- lm(class ~ spam$word_freq_make, data = data)
lm_spam <- lm(class ~ word_freq_make, data = data)
lm_spam <- lm(class ~ word_freq_make + word_freq_internet + word_freq_all + word_freq_address, data = data)
summary(lm_spam)
lm_spam <- lm(class ~ word_freq_make + word_freq_internet + word_freq_all + word_freq_address + word_freq_remove + word_freq_mail, data = data)
summary(lm_spam)
library(car)
residualPlots(lm_spam)
lm_spam <- lm(class ~ I(word_freq_make)^2 + I(word_freq_internet)^2 + I(word_freq_all)^2 + I(word_freq_address)^2 + I(word_freq_remove)^2 + I(word_freq_mail)^2, data = data)
summary(lm_spam)
lm_spam <- lm(class ~ word_freq_make + I(word_freq_make)^2 + I(word_freq_internet)^2 + I(word_freq_all)^2 + I(word_freq_address)^2 + I(word_freq_remove)^2 + I(word_freq_mail)^2, data = data)
summary(lm_spam)
lm_spam <- lm(class ~ word_freq_make + I(word_freq_make^2) + I(word_freq_internet)^2 + I(word_freq_all)^2 + I(word_freq_address)^2 + I(word_freq_remove)^2 + I(word_freq_mail)^2, data = data)
summary(lm_spam)
library(car)
residualPlots(lm_spam)
lm_spam <- lm(class ~  I(word_freq_make^2) + I(word_freq_internet^2) + I(word_freq_all^2) + I(word_freq_address^2) + I(word_freq_remove^2) + I(word_freq_mail^2), data = data)
summary(lm_spam)
library(car)
residualPlots(lm_spam)
pairs(data[,1:10], col = col)
pairs(data[,1:4], col = col)
pairs(data[,1:2], col = col)
col <- rep(nobs, x = "blue")
nobs <- dim(data)[1]
col <- rep(nobs, x = "blue")
col[data$class == 0] <- "red"
pairs(data[,1:2], col = col)
pairs(data[,4:8], col = col)
pairs(data[,5:12], col = col)
features <- c(1:54)
email.pc <- princomp(x = data[, features])
summary(email.pc)
plot(email.pc)
plot(email.pc$scores[,1:2], pch=20, col=col, main='PCA of Swiss')
plot(email.pc$loadings[,1:2], pch=20, col=col, main='PCA of Swiss')
plot(email.pc$scores[,1:2], pch=20, col=col, main='PCA of Swiss')
plot(email.pc$scores[,1:2], pch=20, col=col, main='PCA of Swiss')
pairs(email.pc$scores[,1:10], col = col)
library(ggfortify)
install.packages(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(prcomp(spam))
autoplot(prcomp(data[,features]))
autoplot(prcomp(data[,features]), data = data, colour = col )
autoplot(prcomp(data[,features]), data = data, colour = col, label = T )
autoplot(prcomp(data[,features]), data = data, colour = col, loadings = T )
autoplot(prcomp(data[,features]), data = data, colour = col, loadings = T, loadings.colour = 'purple',loadings.label = TRUE, loadings.label.size = 3)
autoplot(prcomp(data[,features]), data = data, colour = col, loadings = T, scale= 0, loadings.colour = 'purple',loadings.label = TRUE, loadings.label.size = 3)
